// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MrSwed/go-musthave-shortener/internal/app/repository (interfaces: Repositories)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	repository "github.com/MrSwed/go-musthave-shortener/internal/app/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockRepositories) GetAll() repository.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(repository.Store)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoriesMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepositories)(nil).GetAll))
}

// GetFromShort mocks base method.
func (m *MockRepositories) GetFromShort(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromShort", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromShort indicates an expected call of GetFromShort.
func (mr *MockRepositoriesMockRecorder) GetFromShort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromShort", reflect.TypeOf((*MockRepositories)(nil).GetFromShort), arg0)
}

// NewShort mocks base method.
func (m *MockRepositories) NewShort(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewShort", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewShort indicates an expected call of NewShort.
func (mr *MockRepositoriesMockRecorder) NewShort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewShort", reflect.TypeOf((*MockRepositories)(nil).NewShort), arg0)
}

// Ping mocks base method.
func (m *MockRepositories) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoriesMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepositories)(nil).Ping))
}

// Restore mocks base method.
func (m *MockRepositories) Restore() (repository.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore")
	ret0, _ := ret[0].(repository.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockRepositoriesMockRecorder) Restore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockRepositories)(nil).Restore))
}

// RestoreAll mocks base method.
func (m *MockRepositories) RestoreAll(arg0 repository.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreAll indicates an expected call of RestoreAll.
func (mr *MockRepositoriesMockRecorder) RestoreAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAll", reflect.TypeOf((*MockRepositories)(nil).RestoreAll), arg0)
}

// Save mocks base method.
func (m *MockRepositories) Save(arg0 repository.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoriesMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepositories)(nil).Save), arg0)
}
